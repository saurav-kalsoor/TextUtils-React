{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","mode","to","title","aboutText","class","toggleMode","htmlFor","TextForm","text","setText","setStyle","heading","rows","value","onChange","event","target","upperText","toUpperCase","showAlert","lowerText","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","fontWeight","countWords","length","Math","floor","str","replace","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","proptype","PropTypes","string","isRequired","defaultProps","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ad09750.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function About() {\n\n    const [myStyle, setMyStyle] = useState(\n        {\n            color : 'white',\n            backgroundColor : 'black',\n        }\n    )\n\n    const [btnText, setBtnText] = useState('Enable Light Mode')\n\n    const toggleState = ()=>{\n        if(myStyle.color === 'white'){\n            setMyStyle(\n                {\n                    color : 'black',\n                    backgroundColor : 'white'\n                }\n            )\n\n            setBtnText('Enable Dark Mode')\n        }else{\n            setMyStyle(\n                {\n                    color : 'white',\n                    backgroundColor : 'black'\n                }\n            )\n            setBtnText('Enable Light Mode')\n        }\n    }\n\n    return (\n        <div className=\"container\" style={myStyle}>\n            <h1>About Us</h1>\n            <div className=\"accordion my-3\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                <h2 className=\"accordion-header\" id=\"headingOne\">\n                    <button\n                    className=\"accordion-button\"\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#collapseOne\"\n                    aria-expanded=\"true\"\n                    aria-controls=\"collapseOne\"\n                    style={myStyle}\n                    >\n                    Accordion Item #1\n                    </button>\n                </h2>\n                <div\n                    id=\"collapseOne\"\n                    className=\"accordion-collapse collapse show\"\n                    aria-labelledby=\"headingOne\"\n                    data-bs-parent=\"#accordionExample\"\n                >\n                    <div className=\"accordion-body\" style={myStyle}>\n                    <strong>This is the first item's accordion body.</strong> It is\n                    shown by default, until the collapse plugin adds the appropriate\n                    classes that we use to style each element. These classes control\n                    the overall appearance, as well as the showing and hiding via CSS\n                    transitions. You can modify any of this with custom CSS or\n                    overriding our default variables. It's also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>,\n                    though the transition does limit overflow.\n                    </div>\n                </div>\n                </div>\n                <div className=\"accordion-item\">\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\n                    <button\n                    className=\"accordion-button collapsed\"\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#collapseTwo\"\n                    aria-expanded=\"false\"\n                    aria-controls=\"collapseTwo\"\n                    style={myStyle}\n                    >\n                    Accordion Item #2\n                    </button>\n                </h2>\n                <div\n                    id=\"collapseTwo\"\n                    className=\"accordion-collapse collapse\"\n                    aria-labelledby=\"headingTwo\"\n                    data-bs-parent=\"#accordionExample\"\n                >\n                    <div className=\"accordion-body\" style={myStyle}>\n                    <strong>This is the second item's accordion body.</strong> It is\n                    hidden by default, until the collapse plugin adds the appropriate\n                    classes that we use to style each element. These classes control\n                    the overall appearance, as well as the showing and hiding via CSS\n                    transitions. You can modify any of this with custom CSS or\n                    overriding our default variables. It's also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>,\n                    though the transition does limit overflow.\n                    </div>\n                </div>\n                </div>\n                <div className=\"accordion-item\">\n                <h2 className=\"accordion-header\" id=\"headingThree\">\n                    <button\n                    className=\"accordion-button collapsed\"\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#collapseThree\"\n                    aria-expanded=\"false\"\n                    aria-controls=\"collapseThree\"\n                    style={myStyle}\n                    >\n                    Accordion Item #3\n                    </button>\n                </h2>\n                <div\n                    id=\"collapseThree\"\n                    className=\"accordion-collapse collapse\"\n                    aria-labelledby=\"headingThree\"\n                    data-bs-parent=\"#accordionExample\"\n                >\n                    <div className=\"accordion-body\" style={myStyle}>\n                    <strong>This is the third item's accordion body.</strong> It is\n                    hidden by default, until the collapse plugin adds the appropriate\n                    classes that we use to style each element. These classes control\n                    the overall appearance, as well as the showing and hiding via CSS\n                    transitions. You can modify any of this with custom CSS or\n                    overriding our default variables. It's also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>,\n                    though the transition does limit overflow.\n                    </div>\n                </div>\n                </div>\n            </div>\n\n            <button className=\"btn btn-primary\" onClick={toggleState}>{btnText}</button>\n        </div>\n    );\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode}  bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <Link  className=\"navbar-brand\" to=\"/\">\n            {props.title}\n          </Link>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/about\">\n                  {props.aboutText}\n                </Link>\n              </li>\n            </ul>\n            {/* <form className=\"d-flex\">\n              <input\n                className=\"form-control me-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n                aria-label=\"Search\"\n              />\n              <button className=\"btn btn-primary\" type=\"submit\">\n                Search\n              </button>\n            </form> */}\n            <div class={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n            </div>\n          </div>\n        </div>\n      </nav>\n    )\n}\n\nNavbar.proptype = {\n    title : PropTypes.string.isRequired,\n    aboutText : PropTypes.string\n}\n\nNavbar.defaultProps = {\n    title : 'Set Title Here',\n    aboutText : 'Set About Here'\n}","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport default function TextForm(props) {\n    const [text, setText] = useState('Enter text here');\n    const [style, setStyle] = useState({});\n\n    const handleUpClick = ()=>{\n        let upperText = text.toUpperCase();\n        setText(upperText);\n        props.showAlert(\"Converted to uppercase!\", \"success\")\n    }\n\n    const handleLowClick = ()=>{\n        let lowerText = text.toLowerCase();\n        setText(lowerText);\n        props.showAlert(\"Converted to lowercase!\", \"success\")\n    }\n\n    const handleClearClick = ()=>{\n        setText(\"\");\n        props.showAlert(\"Text cleared!\", \"success\")\n    }\n\n    const handleCopy = ()=>{\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text copied to clipboard!\", \"success\")\n    }\n\n    const handleExtraSpaces = ()=>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\")\n    }\n\n    const handleBoldClick = ()=>{\n        setStyle({\n            fontWeight: 'bold'\n        })\n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value);\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"mb-3 dark\">\n                    <h1 className={`text-${props.mode === 'dark' ? 'light' : 'dark'}`}>{props.heading}</h1>\n                    <textarea className={`form-control bg-${props.mode} text-${props.mode === 'dark' ? 'light' : 'dark'}`} style={style} id=\"myBox\" rows=\"20\" value={text} onChange={handleOnChange}></textarea> \n                </div>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleLowClick}>Convert to Lowercase</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleClearClick}>Clear Text</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleCopy}>Copy Text</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleBoldClick}>Convert to Bold</button>\n            </div>\n            <div className={`container my-3 text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\n                <h1>Your Text Summary </h1>\n                <p>{countWords(text)} words and {text.length} characters</p>\n                <p>{Math.floor(countWords(text) * 0.005) + 1 } Minutes read</p>\n                <h2>Preview</h2>\n                <p>{text.length > 0 ? text : 'Enter something in the textbox above to preview it here'}</p>\n            </div>\n        </>\n    )\n}\n\n\n\nfunction countWords(str) {\n    str = str.replace(/(^\\s*)|(\\s*$)/gi,\"\");\n    str = str.replace(/[ ]{2,}/gi,\" \");\n    str = str.replace(/\\n /,\"\\n\");\n    if(str.length === 0)\n        return 0;\n    return str.split(' ').length;\n }\n\nTextForm.proptype = {\n    heading : PropTypes.string,\n}","import React from 'react'\n\nexport default function Alert(props) {\n\n    const capitalize = (word)=>{\n        let lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert &&\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)} : </strong> {props.alert.msg}\n        </div>\n    )\n} \n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#103770\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n\n        <div className=\"container my-3\">\n          <Alert alert={alert} />\n        </div>\n\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}